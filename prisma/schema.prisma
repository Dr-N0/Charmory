generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(uuid())
  email       String      @unique
  password    String
  characters  Character[]
}

model Character {
  id              String        @id @default(uuid())
  owner           User          @relation(fields: [ownerEmail], references: [email])
  ownerEmail      String
  createdAt       DateTime      @default(now())

  name            String?
  level           Int           @default(1)
  feats           String[]      @default([])
  speed           Int           @default(30)
  armorClass      Int           @default(10)
  initiative      Int           @default(0)
  proficencies    Json?
  inspiration     Boolean       @default(false)

  healthMax       Int
  healthCurrent   Int
  senses          Senses[]      @default([])
  
  race            Json?
  class           Json?
  abilities       Json?
  description     Json?
  equipment       Json?

  inventory       Json?

  height          String?
  eyeColor        String?
}
enum Senses {
  BLINDSIGHT
  DARKVISION
  TREMORSENSE
  TRUESIGHT
}

// ===== Race =====
model Race {
  id              Int             @id @default(autoincrement())
  name            String          @unique
  color           String?
  description     String?
  keywords        String[]        @default([])
  variants        Json[]          @default([])
  racialTraits    RacialTraits?
}

model RacialTraits {
  id              Int       @id @default(autoincrement())
  race            Race      @relation(fields: [raceId], references: [id])
  raceId          Int       @unique

  name            String    @unique
  age             Int       @default(1)
  size            Size      @default(MEDIUM)
  languages       String[]  @default([])
  abilityBonuses  Json
  racialAbilities Json[]
}

enum Size {
  TINY
  SMALL
  MEDIUM
  LARGE
  HUGE
}

// ===== Class =====
model Class {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  color         String
  spells        Spell[]
  subClasses    String[]

  classFeatures ClassFeatures?
}

model ClassFeatures {
  id                Int         @id @default(autoincrement())
  class             Class       @relation(fields: [classId], references: [id])
  classId           Int         @unique

  armorProficency   String[]
  weaponProficency  String[]
  toolProficency    String[]
  savingThrowBonus  String[]
  skillProfOptions  String[]
}

// ===== Abilities =====
model Abilities {
  id            Int         @id @default(autoincrement())

  strength      Int         @default(10)
  dexterity     Int         @default(10)
  constitution  Int         @default(10)
  intelligence  Int         @default(10)
  wisdom        Int         @default(10)
  charisma      Int         @default(10)
}

// ===== Description =====
model Background {
  id                  Int             @id @default(autoincrement())

  name                String          @unique
  explanation         String
  skillProficiencies  String[]        @default([])
  toolProficiencies   String[]        @default([])
  extraLanguages      Int             @default(0)
  extraEquipment      String[]        @default([])
  features            Json[]          @default([])
  variants            Json[]          @default([])
}

// ===== Equipment =====
model Equipment {
  id            Int         @id @default(autoincrement())

  name          String
  description   String
  group         String?
  armorClass    String?
  strength      Int?
  stealth       String?
  cost          Json?
  damage        String?
  weight        Json?
  properties    String[]    
  qty           Int?
}


model Packs {
  id        Int      @id @default(autoincrement())
  name      String
  cost      Int
  contents  Json[]
}

model Proficencies {
  id        Int       @id @default(autoincrement())

  savingStrength      HowProficent  @default(NONE)
  savingDexterity     HowProficent  @default(NONE)
  savingConstitution  HowProficent  @default(NONE)
  savingIntelligence  HowProficent  @default(NONE)
  savingWisdom        HowProficent  @default(NONE)
  savingCharisma      HowProficent  @default(NONE)
  
  acrobatics          HowProficent  @default(NONE)
  animalHandling      HowProficent  @default(NONE)
  arcana              HowProficent  @default(NONE)
  athletics           HowProficent  @default(NONE)
  deception           HowProficent  @default(NONE)
  history             HowProficent  @default(NONE)
  insight             HowProficent  @default(NONE)
  intimidation        HowProficent  @default(NONE)
  investigation       HowProficent  @default(NONE)
  medicine            HowProficent  @default(NONE)
  nature              HowProficent  @default(NONE)
  perception          HowProficent  @default(NONE)
  performance         HowProficent  @default(NONE)
  persuasion          HowProficent  @default(NONE)
  religion            HowProficent  @default(NONE)
  sleightOfHand       HowProficent  @default(NONE)
  stealth             HowProficent  @default(NONE)
  survival            HowProficent  @default(NONE)
}
enum HowProficent {
  NONE
  PROFICENT
  EXTRA
}

model Inventory {
  id          Int         @id @default(autoincrement())

  armor       Json?
  weapons     Json[]
  items       Json[]
  spells      Json[]
}

enum ItemType {
  ARMOR
  WEAPON
  RING
  ROD
  SCROLL
  STAFF
  WAND
  MAGIC_ITEM
}

model Spell {
  id           Int      @id @default(autoincrement())
  class        Class    @relation(fields: [className], references: [name])
  className    String

  name         String

  level        Int
  school       String
  castingTime  String
  range        String
  components   Json
  duration     String
  description  String
}